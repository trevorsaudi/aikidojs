import{a0 as t}from"./index-13ff96f4.js";async function L({page:e,sort_by_column:s,sort_by_direction:n,search:a,filter_risk_level:i,filter_language:c,filter_repo_id:r,filter_target_path_id:u,filter_container_repo_id:y,filter_license_types:p,filter_team:_,per_page:g,filter_package_name:l=void 0}){const o={page:e,sort_by_column:s,sort_by_direction:n,search:a,filter_risk_level:i,filter_lang:c,filter_repo_id:r,filter_target_path_id:u,filter_container_repo_id:y,filter_team:_,per_page:g};return p!==null&&(o.filter_license_types=p),l&&(o.filter_package_name=l),(await t.post("/api/licenses/listGroupedLicenses",o)).data}async function w({sort_by_column:e,sort_by_direction:s}){const n={sort_by_column:e,sort_by_direction:s};return(await t.get("/api/licenses/listLicenseCountByType",{params:n})).data.license_count_by_type}async function m(){return(await t.get("/api/licenses/listLicenseTypes")).data.license_types}async function k({repo_id:e,image_id:s,package_name:n,language:a,new_risk:i,reason:c}){return(await t.post("/api/licenses/contest",{repo_id:e,image_id:s,package_name:n,language:a,new_risk:i,reason:c})).data}async function v({repo_id:e,image_id:s,package_name:n,language:a}){return(await t.post("/api/licenses/resolve",{repo_id:e,image_id:s,package_name:n,language:a})).data}async function I(e){const s={package_name:e};return(await t.get("/api/licenses/getLicenseLocations",{params:s})).data}async function T(e){const s={filter_risk_level:e.riskLevel??null,filter_target_path_id:e.targetPathId??null,filter_team:e.team??null};return e.containerRepo&&(s.filter_container_repo_id=e.containerRepo.join(",")),e.repository&&(s.filter_repo_id=e.repository.join(",")),e.language&&(s.filter_lang=e.language.join(",")),e.license_types&&(s.filter_license_types=e.license_types.join("@@")),(await t.post("/api/licenses/filters/details",s)).data}async function R(e,s,n){await t.post("/api/licenses/risk/overwrite",{license:e,risk:s,reason:n})}const j=async e=>{await t.post("/api/licenses/startProcessing",{params:e})},B=async e=>{const s={license_type:e};return(await t.get("/api/licenses/getLicenseRiskInfoByType",{params:s})).data.license_risk_info},F=async e=>{const s={setting:e};await t.post("/api/licenses/updateLicensesInFeedSettings",s)};export{m as a,w as b,k as c,T as d,B as e,I as g,L as l,R as o,v as r,j as s,F as u};
