import{_ as R,X as b,f as C,an as o,be as u,aV as a,aT as _,fn as w,aR as S,bf as F,A as I,dx as T,fo as v,r as c,m as B,o as d,w as h,n as g,F as k,a$ as x,bh as O,q as E,s as L}from"./index-13ff96f4.js";import{X as A}from"./XTabs-d492da26.js";import{P as $}from"./PageHeader-46c38a32.js";import{c as N}from"./trycatch-83445d5b.js";import{u as P}from"./useInfiniteScroll-47c60c9e.js";import{g as G}from"./tableSortingCache-ca369cac.js";const V={components:{XPreloader:b,PageHeader:$,XTabs:A,BaseButton:C},setup(){const{records:e,fetch:t,refresh:n,watchElement:s}=P(x,30,i=>i,{stopPaginationBehaviour:"eager"});return{repositories:e,fetchRepositories:t,refreshRepositories:n,watchElement:s}},data(){return{isLoading:!0,disableScanAllButton:!1,tab:this.$route.name,tabs:[{title:"Containers",id:"containerOverview"},{title:"Checks",id:"containerOverviewChecks"}],registries:[],repositoryCount:0,clouds:[],configurationIssues:[],registryTypeFilter:null,registryFilter:null,registryTypes:[],registryOptions:[],sorting:{},containerSearchFilter:"",containerRegions:[],regionFilter:null}},watch:{tab(){this.sorting={},this.$router.push({name:this.tab})},async isLoading(){await this.watchElementForInfiniteScroll()},"$route.name"(){this.tab=this.$route.name},async sorting(){this.$globalLoadingIndicator.show();try{await this.handleRefreshRepositories()}finally{this.$globalLoadingIndicator.hide()}},$teamContext(){this.handleRefreshRepositories(),this.loadContainerRegions()}},created(){o.on(u,this.loadData),o.on("registry.deleted",this.handleGetRegistries),o.on("cloudRepository.updated",this.handleRefreshRepositories),o.on("cloudRepository.created",this.handleRefreshRepositories),o.on("configurationIssueIgnored",this.loadConfigurationIssues),o.on("cloudRepository.deactivated",this.handleRefreshRepositories)},beforeUnmount(){o.off(u,this.loadData),o.off("registry.deleted",this.handleGetRegistries),o.off("cloudRepository.updated",this.handleRefreshRepositories),o.off("cloudRepository.created",this.handleRefreshRepositories),o.off("configurationIssueIgnored",this.loadConfigurationIssues),o.off("cloudRepository.deactivated",this.handleRefreshRepositories)},async mounted(){this.sorting=G("container"),await this.loadData(),this.isLoading=!1},provide(){return{isLoading:a(()=>this.isLoading),registries:a(()=>this.registries),repositories:a(()=>this.repositories),clouds:a(()=>this.clouds),configurationIssues:a(()=>this.configurationIssues),registryTypeFilter:a(()=>this.registryTypeFilter),registryFilter:a(()=>this.registryFilter),registryTypes:a(()=>this.registryTypes),registryOptions:a(()=>this.registryOptions),sortingCacheStorageKey:"container",containerRegions:a(()=>this.containerRegions)}},computed:{breadcrumbs(){const e=[{label:"Containers"}];return this.tab==="containerOverview"&&e.push({label:"Containers"}),e},subtitle(){return this.$t("X_CONTAINERS",this.repositoryCount)}},methods:{async loadData(){await Promise.allSettled([this.handleGetRegistries(),this.handleRefreshRepositories(),this.handleGetClouds(),this.loadConfigurationIssues(),this.loadContainerRegions()]),this.loadRegistryOptions(),this.loadRegistryTypes()},async handleGetRegistries(){this.registries=await _()},async handleRefreshRepositories(e=null){if(e&&e.containerId){await this.updateSingleRepository(e.containerId);return}const t=await w();this.repositoryCount=t.count,await this.handleGetRepositories(!0)},async handleGetRepositories(e=!1){let t=null,n=null;this.registryFilter&&([t,n]=this.registryFilter.split("_"));const s={activeOnly:!0,registryType:this.registryTypeFilter,sorting:this.sorting,registryKind:t,registryId:n,search:this.containerSearchFilter,region:this.regionFilter};e?await this.refreshRepositories(s):await this.fetchRepositories(s)},async handleGetClouds(){const e=await S();this.clouds=e.filter(t=>["aws","gcp"].includes(t.type))},async loadConfigurationIssues(){this.configurationIssues=await F()},async handleFilterSelected(e){this.containerSearchFilter=(e==null?void 0:e.search)??"",this.registryTypeFilter=(e==null?void 0:e.registryTypeFilter)??null,this.registryFilter=(e==null?void 0:e.registryFilter)??null,this.regionFilter=(e==null?void 0:e.regionFilter)??null,this.isLoading=!0;try{await this.handleRefreshRepositories()}finally{this.isLoading=!1}},async handleStartAllScans(){if(I.hasExpiredFullTrial())return this.$modal.show("UpgradeAccountModal",{title:"Upgrade to scan whenever you want",msg:"In our free plan, scans are performed automatically every night. Step up to instant scanning when it suits you, across all your repositories, clouds and containers."});this.disableScanAllButton=!0;for(const e of this.repositories)await N({},async()=>{await O({cloud_repo_id:e.id},{disable_toasts:!0})});this.disableScanAllButton=!1},handleChangeSorting(e){this.sorting=e},async watchElementForInfiniteScroll(){await this.$nextTick();const e=document.getElementById("containerTableBottom");e&&this.watchElement(e,{threshold:0,rootMargin:"1000px"})},loadRegistryOptions(){const e=[];for(const t of this.registries){const n=t.id,s="registry",i=`${s}_${n}`,r=this.getRegistryName(t);e.push({kind:s,id:i,name:r})}for(const t of this.clouds){const n=t.id,s="cloud",i=`${s}_${n}`;t.type==="gcp"&&this.registries.some(l=>l.kind==="gcp-artifact-registry"&&l.registry_name===t.account_id)||t.type==="aws"&&this.registries.some(l=>l.kind==="aws"&&l.registry_name===t.account_id)||e.push({kind:s,id:i,name:t.name})}this.registryOptions=e},async loadRegistryTypes(){const e=[];for(const t of this.registries)e.push(t.kind);for(const t of this.clouds)e.push(t.type);this.registryTypes=[...e,"docker-hub","sbom-upload"]},getRegistryName(e){return(e==null?void 0:e.kind)==="aws"?e.username:e.registry_name||e.username},async updateSingleRepository(e){const t=this.repositories.findIndex(r=>r.id==e);if(t<0)return;const n=await T(e),{last_scanned_at:s,open_issues:i}=n;this.repositories[t].last_scanned_at=s,this.repositories[t].open_issue_count=i},async loadContainerRegions(){const{regions:e}=await v();this.containerRegions=e}}},X={class:"flex gap-16px"},D={class:"page-content"};function U(e,t,n,s,i,r){const l=c("XTabs"),p=c("BaseButton"),y=c("PageHeader"),f=c("router-view");return E(),B(k,null,[d(y,{breadcrumbs:r.breadcrumbs,title:"Containers",subtitle:r.subtitle},{tabs:h(()=>[d(l,{tabs:i.tabs,modelValue:i.tab,"onUpdate:modelValue":t[0]||(t[0]=m=>i.tab=m),class:"page-tabs"},null,8,["tabs","modelValue"])]),rightContent:h(()=>[g("div",X,[d(p,{disabled:i.disableScanAllButton,onClicked:r.handleStartAllScans,variation:"primary",border:!0},{default:h(()=>[L(" Start scan ")]),_:1},8,["disabled","onClicked"])])]),_:1},8,["breadcrumbs","subtitle"]),g("div",D,[d(f,{onFilterSelected:r.handleFilterSelected,onSort:r.handleChangeSorting},null,8,["onFilterSelected","onSort"])])],64)}const z=R(V,[["render",U]]);export{z as default};
