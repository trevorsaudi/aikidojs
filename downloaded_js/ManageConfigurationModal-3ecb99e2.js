import{_ as B,H as M,f as V,B as P,M as x,N as F,z as R,x as H,bk as D,d as O,A as C,a3 as v,gK as U,an as j,r as m,q as c,k as u,w as s,o as t,m as f,u as b,p as A,n as d,s as r}from"./index-13ff96f4.js";const T={emits:["close"],components:{BaseHeading:M,BaseButton:V,BaseParagraph:P,BaseModal:x,BaseSelect:F,InputSwitch:R,BaseIcon:H,BaseBody:D,BasePill:O},props:{repositories:Array},data(){const e=this.getDefaultConfig();return{isSaving:!1,minimumSeverity:e.minimum_severity,enableDependencyScan:!!e.fail_on_dependency_scan,enableSastScan:!!e.fail_on_sast_scan,enableIacScan:!!e.fail_on_iac_scan,enableSecretsScan:!!e.fail_on_secrets_scan,enableMalwareScan:!!e.fail_on_malware_scan,enablePostInlineComments:!!e.post_inline_comments}},watch:{enableSecretsScan(){this.disableInlineCommentOption&&(this.enablePostInlineComments=!1)},enableSastScan(){this.disableInlineCommentOption&&(this.enablePostInlineComments=!1)},enableIacScan(){this.disableInlineCommentOption&&(this.enablePostInlineComments=!1)}},computed:{isPayingAccount(){return C.isPaying()},isEditingConfigurationForMultipleRepos(){return this.repositories.length>1},singleRepositoryHasConfiguration(){return this.isEditingConfigurationForMultipleRepos?!1:!!this.repositories[0].configuration},scmRepoName(){return this.isEditingConfigurationForMultipleRepos?null:this.repositories[0].scm_repo_name},modalTitle(){if(this.repositories.length>1)return null;const e=this.repositories[0].configuration;return!e||e.updated_by<1||this.scmRepoId!=e.scm_repo_id?null:`Updated on ${v.fromUnix(e.updated_at).format(v.US_FRIENDLY_SHORT_DATE)} by ${e.updated_by_name}`},minimumSeverityOptions(){return[{id:"critical",title:"Critical",disabled:this.minimumSeverity==="critical"},{id:"high",title:"High",disabled:this.minimumSeverity==="high"},{id:"medium",title:"Medium",disabled:this.minimumSeverity==="medium"},{id:"low",title:"Low",disabled:this.minimumSeverity==="low"}]},disableInlineCommentOption(){return!this.enableSastScan&&!this.enableSecretsScan&&!this.enableIacScan}},methods:{handleClose(){this.$emit("close")},async handleSaveConfiguration(){if(!this.enableDependencyScan&&!this.enableSastScan&&!this.enableIacScan&&!this.enableSecretsScan&&!this.enableMalwareScan){this.$toast.error({title:"Invalid Configuration",description:"You must enable at least one of the scans to enable scanning."});return}this.isSaving=!0;const e={scm_repo_ids:this.repositories.map(n=>n.id),minimum_severity:this.minimumSeverity,fail_on_dependency_scan:this.enableDependencyScan,fail_on_sast_scan:this.enableSastScan,fail_on_iac_scan:this.enableIacScan,fail_on_secrets_scan:this.enableSecretsScan,fail_on_malware_scan:this.enableMalwareScan,post_inline_comments:this.enablePostInlineComments};try{await U(e),j.emit("gitlabChecksConfigurationUpdated"),this.handleClose()}finally{this.isSaving=!1}},getDefaultConfig(){const e=this.repositories.map(a=>a.configuration),n=e[0];return n?this.repositories.length===1?n??this.getFallbackConfig():e.every(a=>!!a&&a.minimum_severity===n.minimum_severity)?e.every(a=>!!a&&a.fail_on_dependency_scan===n.fail_on_dependency_scan)?e.every(a=>!!a&&a.fail_on_sast_scan===n.fail_on_sast_scan)?e.every(a=>!!a&&a.fail_on_iac_scan===n.fail_on_iac_scan)?e.every(a=>!!a&&a.post_inline_comments===n.post_inline_comments)?n:this.getFallbackConfig():this.getFallbackConfig():this.getFallbackConfig():this.getFallbackConfig():this.getFallbackConfig():this.getFallbackConfig()},getFallbackConfig(){return C.isPaying()?{minimum_severity:"critical",fail_on_dependency_scan:!0,fail_on_sast_scan:!0,fail_on_iac_scan:!0,fail_on_secrets_scan:!0,fail_on_malware_scan:!1,post_inline_comments:!0}:{minimum_severity:"critical",fail_on_dependency_scan:!0,fail_on_sast_scan:!1,fail_on_iac_scan:!1,fail_on_secrets_scan:!1,fail_on_malware_scan:!1,post_inline_comments:!1}},requestCiMalwareScan(){const e="Hi, I would like to request malware in CI scanning.";window.Intercom("showNewMessage",e)}}},N={key:0},L={class:"flex flex-column gap-8px"},E=d("hr",{class:"divider w-full my-16px"},null,-1),q={class:"flex flex-column gap-16px"},G={class:"flex justify-between align-center"},Y={key:1,class:"flex align-center justify-between"},z={key:3,class:"flex align-center justify-between"},K={key:5,class:"flex align-center justify-between"},J={key:7,class:"flex align-center justify-between"},Q=d("hr",{class:"divider w-full"},null,-1),W={class:"flex align-center ml-auto gap-8px"};function X(e,n,h,w,i,l){const p=m("BaseParagraph"),a=m("BaseHeading"),I=m("BaseSelect"),_=m("InputSwitch"),S=m("BaseBody"),g=m("BasePill"),y=m("BaseButton"),k=m("BaseModal");return c(),u(k,{width:530,onClose:l.handleClose,canClose:!0},{header:s(()=>[t(p,{color:"gray"},{default:s(()=>[l.modalTitle?(c(),f("span",N,b(l.modalTitle),1)):A("",!0)]),_:1})]),content:s(()=>[d("div",L,[l.isEditingConfigurationForMultipleRepos?(c(),u(a,{key:0,as:"h3"},{default:s(()=>[r("Manage Configuration for "+b(h.repositories.length)+" repos",1)]),_:1})):(c(),u(a,{key:1,as:"h3"},{default:s(()=>[r("Manage configuration for "),d("strong",null,b(this.scmRepoName),1)]),_:1})),t(p,{color:"subdued",loose:""},{default:s(()=>[r("This configuration will be applied to selected repos.")]),_:1})]),E,d("div",q,[d("label",G,[t(p,null,{default:s(()=>[r("Scan Failure For Minimum Severity")]),_:1}),t(I,{modelValue:i.minimumSeverity,"onUpdate:modelValue":n[0]||(n[0]=o=>i.minimumSeverity=o),options:l.minimumSeverityOptions,class:"min-w-116px"},null,8,["modelValue","options"])]),t(_,{modelValue:i.enableDependencyScan,"onUpdate:modelValue":n[1]||(n[1]=o=>i.enableDependencyScan=o),class:"justify-between",labelLeft:"Dependency Scan"},null,8,["modelValue"]),l.isPayingAccount?(c(),u(_,{key:0,modelValue:i.enableSastScan,"onUpdate:modelValue":n[2]||(n[2]=o=>i.enableSastScan=o),class:"justify-between",labelLeft:"SAST Scan"},null,8,["modelValue"])):(c(),f("div",Y,[t(S,null,{default:s(()=>[r("SAST Scan")]),_:1}),t(g,{variation:"purple",title:"Upgrade"})])),l.isPayingAccount?(c(),u(_,{key:2,modelValue:i.enableIacScan,"onUpdate:modelValue":n[3]||(n[3]=o=>i.enableIacScan=o),class:"justify-between",labelLeft:"IaC Scan"},null,8,["modelValue"])):(c(),f("div",z,[t(S,null,{default:s(()=>[r("SAST Scan")]),_:1}),t(g,{variation:"purple",title:"Upgrade"})])),l.isPayingAccount?(c(),u(_,{key:4,modelValue:i.enableSecretsScan,"onUpdate:modelValue":n[4]||(n[4]=o=>i.enableSecretsScan=o),class:"justify-between",labelLeft:"Secrets Scan"},null,8,["modelValue"])):(c(),f("div",K,[t(S,null,{default:s(()=>[r("Secrets Scan")]),_:1}),t(g,{variation:"purple",title:"Upgrade"})])),e.$featureflags.enable_ci_malware_scan?(c(),u(_,{key:6,modelValue:i.enableMalwareScan,"onUpdate:modelValue":n[5]||(n[5]=o=>i.enableMalwareScan=o),class:"justify-between",labelLeft:"Malware Scan"},null,8,["modelValue"])):(c(),f("div",J,[t(S,null,{default:s(()=>[r("Malware Scan")]),_:1}),t(g,{variation:"green",title:"Get in touch",class:"cursor-pointer",onClick:l.requestCiMalwareScan},null,8,["onClick"])])),Q,t(_,{modelValue:i.enablePostInlineComments,"onUpdate:modelValue":n[6]||(n[6]=o=>i.enablePostInlineComments=o),class:"justify-between",labelLeft:"Add inline comments on the PR in Gitlab",disabled:l.disableInlineCommentOption},null,8,["modelValue","disabled"])])]),footer:s(()=>[d("div",W,[t(y,{onClicked:l.handleClose,variation:"plain"},{default:s(()=>[r("Cancel")]),_:1},8,["onClicked"]),t(y,{onClicked:l.handleSaveConfiguration,variation:"primary","is-loading":i.isSaving},{default:s(()=>[r("Save Configuration")]),_:1},8,["onClicked","is-loading"])])]),_:1},8,["onClose"])}const $=B(T,[["render",X]]);export{$ as default};
