import{_ as P,B as j,a1 as K,f as V,e as Q,d as X,Q as N,b7 as ae,an as y,b8 as se,r as o,q as c,m as u,o as i,w as n,k as I,s as g,t as $,S as L,u as F,ai as w,F as M,n as p,p as v,a2 as oe,z as re,b9 as G,A as E,ba as le,a8 as ce,bb as de,bc as ue,i as ge,bd as he,ah as H,H as me,I as pe,aV as fe,be as Y,aw as _e,aT as Ce,bf as ye,aR as Re,bg as ke,bh as z,bi as W,af as Ie}from"./index-13ff96f4.js";import{u as be}from"./useInfiniteScroll-47c60c9e.js";import{A as q}from"./ActionMenu-3e4470bf.js";import{C as Se}from"./CloudActionMenu-eae2a866.js";import{S as we}from"./SettingsEmptyState-8e8644cd.js";import{E as ve}from"./EmptyMetricsIllutstration-491e438a.js";import{D as J,a as Z}from"./DataTable-e31a825a.js";import{a as ee,D as te}from"./DataTableCell-51c0104f.js";import{g as Te}from"./repoName-872812ed.js";import{R as xe}from"./RepostioryDomainCell-e75ba707.js";import{D as De}from"./DataTableCellSelectable-71ffdbc4.js";import{I as Ae}from"./InputCheckbox-81cb3ca6.js";import{L as Fe,A as Ee}from"./AikidoScannerForRegistriesCallout-2e5e8ee4.js";import{D as Be}from"./DataTableLastScanColumn-e155b78a.js";import{g as $e}from"./dateFns-a344cb79.js";import{F as Me}from"./FilterButton-bb5393a7.js";import{I as Ue}from"./InputFilterDropdown-674351d9.js";import"./ConfigureCloudModal-3285b63a.js";import"./SelectTeam-d51b76ec.js";import"./StackedAvatars-4925baeb.js";import"./DeleteCloudModal-fcf43857.js";import"./BaseStatusLabel-0ccd2806.js";import"./BaseCallout-aea0aba4.js";import"./index-b87db690.js";const Le={emits:["startScanClicked","onRegistryClicked","onCloudClicked"],props:{registries:Array,clouds:Array,isLoading:Boolean,configurationIssues:{type:Array,default:()=>[]}},components:{DataTable:J,DataTableHeader:Z,DataTableRow:ee,DataTableCell:te,BaseParagraph:j,LoadingSkeleton:K,BaseButton:V,ActionMenu:q,BaseIconButton:Q,CloudActionMenu:Se,SettingsEmptyState:we,EmptyMetricsIllutstration:ve,BasePill:X},computed:{availableClouds(){const t=this.registries.filter(s=>["aws","gcp-artifact-registry","gcp-container-registry"].includes(s.kind)).map(s=>s.registry_name);return this.clouds.filter(s=>!t.includes(s.account_id))}},methods:{async deleteRegistry(e){await N({headerText:"Delete registry",description:"Do you want to remove this registry? This will also remove all associated container repos.",buttonSubmitText:"Yes, delete"})&&(await ae(e),this.$toast.success({title:this.$t("SUCCESS"),description:"Registry successfully deleted"}),this.$emit("registryDeleted"),y.emit("registry.deleted"))},getActionMenuItems(e){return[{items:[{label:"Scan containers in registry",onClick:()=>this.$emit("startScanClicked",e.id),icon:"icon-arrow-right",iconColor:"green"},{label:"Fetch containers from registry",onClick:()=>this.fetchReposForRegistry(e.id),icon:"icon-refresh"},{label:"Edit",onClick:()=>this.$modal.show("UpdateContainerRegistryTokenModal",e),icon:"icon-edit",hidden:!this.canEditRegistry(e)},{label:"Delete",onClick:()=>this.deleteRegistry(e.id),destructive:!0}].filter(s=>!s.hidden)}]},getCloudActionMenuItems(e){return[{items:[{label:"Scan containers in registry",onClick:()=>this.$emit("startCloudScanClicked",e.id),icon:"icon-starter"}]}]},async fetchReposForRegistry(e){await se(e),this.$toast.success("Started fetching repos from registry")},isSvgIcon(e){return["digitalocean","scaleway","cloudsmith","harbor","quay","artifactory","sonatype-nexus"].includes(e)},getSourceIcon(e){return e=="docker-hub"?"icon-docker":e=="aws"?"icon-location_aws":e=="acr"?"icon-azure":e=="gitlab"||e=="gitlab-self"?"icon-Gitlab":e=="digitalocean"?"digitalocean-black":e=="scaleway"?"scaleway-black":e=="cloudsmith"?"cloudsmith-black":e=="artifactory"?"artifactory-black":e=="harbor"?"harbor-black":e=="quay"?"quay-black":e=="gcp-container-registry"||e=="gcp-artifact-registry"?"icon-gcp":e=="sonatype-nexus"?"sonatype-nexus":`icon-${e}`},getRegistryName(e){return["docker-hub","cloudsmith","acr","gcp-container-registry","sonatype-nexus"].includes(e.kind)?e.registry_name||e.username:e.api_url?new URL(e.api_url).hostname:["aws"].includes(e.kind)?`${e.username}: ${e.registry_name}`:e.registry_name||e.username},getConfigurationIssueForCloud(e){return this.configurationIssues.find(t=>t.cloud_id==e&&t.kind==="container_analysis_disabled")},hasContainerAnalysisDisabled(e){return!!this.getConfigurationIssueForCloud(e)},handleEnableContainerAnalysis(e){if(!this.$groupUser.can_manage_containers){this.$modal.show("InfoModal",{headerText:"Enable Container Registry scanning",title:"You do not have permission to manage container registries.",description:"Contact your admin to manage container registries",buttonSubmitText:"Got It!"});return}const t=this.clouds.find(s=>e===s.id);t&&(t.type==="gcp"&&this.$modal.show("FixContainerAnalysisDisabledForGcpCloud"),t.type==="aws"&&this.$modal.show("FixContainerAnalysisDisabledForAwsCloud"))},handleIgnoreConfigIssue(e){if(!this.$groupUser.can_manage_containers){this.$modal.show("InfoModal",{headerText:"Ignore configuration issue",title:"You do not have permission to ignore container configuration issues.",description:"Contact your admin to manage container configuration issues",buttonSubmitText:"Got It!"});return}const t=this.getConfigurationIssueForCloud(e);this.$modal.show("IgnoreConfigurationIssue",{issue:t})},getFormattedCloudRegistryKind(e){return e.type==="aws"?"AWS Inspector":e.type==="gcp"?"GCP Container Analysis":null},canEditRegistry(e){return e.kind!="aws"}}},Pe={key:0},Oe=["src"],Ne=["src"],Ve={class:"flex justify-between gap-12px align-center w-full"},qe={class:"flex gap-8px align-center"},Ge={key:0,class:"flex gap-12px align-center max-h-20px"},He=p("span",null,"Enable container scanning",-1);function Ye(e,t,s,h,l,a){const T=o("EmptyMetricsIllutstration"),f=o("SettingsEmptyState"),R=o("DataTableHeader"),k=o("BaseParagraph"),_=o("DataTableCell"),m=o("BaseIconButton"),A=o("ActionMenu"),x=o("DataTableRow"),b=o("BasePill"),U=o("BaseButton"),B=o("LoadingSkeleton"),O=o("DataTable");return!s.isLoading&&s.registries.length==0&&s.clouds.length==0?(c(),u("div",Pe,[i(f,{title:e.$t("SETTINGS.CONTAINER_IMAGE_REGISTRY.OVERVIEW.EMPTY_STATE_TITLE"),description:e.$t("SETTINGS.CONTAINER_IMAGE_REGISTRY.OVERVIEW.EMPTY_STATE_DESCRIPTION"),actionLabel:e.$t("SETTINGS.CONTAINER_IMAGE_REGISTRY.OVERVIEW.EMPTY_STATE_ACTION_LABEL"),onAction:t[0]||(t[0]=d=>e.$emit("connectRegistryClick"))},{default:n(()=>[i(T)]),_:1},8,["title","description","actionLabel"])])):(c(),I(O,{key:1},{header:n(()=>[i(R,{width:"48px",alignment:"center"},{default:n(()=>[g("Type")]),_:1}),i(R,{width:"auto"},{default:n(()=>[g("Name")]),_:1}),i(R,{width:"48px",alignment:"center"})]),body:n(()=>[(c(!0),u(M,null,$(s.registries,(d,D)=>(c(),I(x,{key:D,clickable:"",onClick:C=>e.$emit("onRegistryClicked",d.id)},{default:n(()=>[i(_,null,{default:n(()=>[i(k,null,{default:n(()=>[a.isSvgIcon(d.kind)?(c(),u("img",{key:0,src:`/assets/icons/${a.getSourceIcon(d.kind)}.svg`,height:"12",class:"rounded-2px"},null,8,Oe)):(c(),u("i",{key:1,class:L(["icon text-carbon-60",a.getSourceIcon(d.kind)])},null,2))]),_:2},1024)]),_:2},1024),i(_,null,{default:n(()=>[i(k,null,{default:n(()=>[g(F(a.getRegistryName(d)),1)]),_:2},1024)]),_:2},1024),i(_,{spacing:"compact",alignment:"center",class:"data-table__cell--action",onClick:w(()=>e.$refs.trigger[D].click(),["prevent","stop"])},{default:n(()=>[i(A,{sections:a.getActionMenuItems(d),placement:"bottom-end"},{trigger:n(C=>[i(m,{icon:"icon-actions",class:"data-table__row__action",onClick:C.toggle,ref_for:!0,ref:"trigger"},null,8,["onClick"])]),_:2},1032,["sections"])]),_:2},1032,["onClick"])]),_:2},1032,["onClick"]))),128)),(c(!0),u(M,null,$(a.availableClouds,(d,D)=>(c(),I(x,{key:D,clickable:"",onClick:C=>e.$emit("onCloudClicked",d.id)},{default:n(()=>[i(_,null,{default:n(()=>[i(k,null,{default:n(()=>[a.isSvgIcon(d.type)?(c(),u("img",{key:0,src:`/assets/icons/${a.getSourceIcon(d.type)}.svg`,height:"12",class:"rounded-2px"},null,8,Ne)):(c(),u("i",{key:1,class:L(["icon text-carbon-60",a.getSourceIcon(d.type)])},null,2))]),_:2},1024)]),_:2},1024),i(_,null,{default:n(()=>[p("div",Ve,[p("div",qe,[i(k,{truncate:""},{default:n(()=>[g(F(d.name),1)]),_:2},1024),i(b,{variation:"gray-fill",title:a.getFormattedCloudRegistryKind(d)},null,8,["title"])]),a.hasContainerAnalysisDisabled(d.id)?(c(),u("div",Ge,[i(U,{size:"small",variation:"primary",onClick:w(C=>a.handleEnableContainerAnalysis(d.id),["prevent","stop"])},{default:n(()=>[He]),_:2},1032,["onClick"]),i(U,{size:"small",variation:"tertiary",onClick:()=>a.handleIgnoreConfigIssue(d.id)},{default:n(()=>[g(" Ignore ")]),_:2},1032,["onClick"])])):v("",!0)])]),_:2},1024),i(_,{spacing:"compact",alignment:"center",class:"data-table__cell--action"},{default:n(()=>[i(A,{sections:a.getCloudActionMenuItems(d),placement:"bottom-end"},{trigger:n(C=>[i(m,{icon:"icon-actions",class:"data-table__row__action",onClick:C.toggle,ref_for:!0,ref:"trigger"},null,8,["onClick"])]),_:2},1032,["sections"])]),_:2},1024)]),_:2},1032,["onClick"]))),128)),s.isLoading?(c(),u(M,{key:0},$(2,d=>i(x,{key:d},{default:n(()=>[i(_,null,{default:n(()=>[i(B,{height:"16px"})]),_:1}),i(_,null,{default:n(()=>[i(B,{height:"16px"})]),_:1}),i(_,null,{default:n(()=>[i(B,{height:"16px"})]),_:1})]),_:2},1024)),64)):v("",!0)]),_:1}))}const ze=P(Le,[["render",Ye]]),We={props:{repositories:Array,isLoading:Boolean,selectedContainerRepoIds:{type:Array,default:()=>[]}},components:{DataTable:J,DataTableHeader:Z,DataTableRow:ee,DataTableCell:te,BaseParagraph:j,LoadingSkeleton:K,LinkCloudRepo:Fe,BaseButton:V,BaseIconButton:Q,ActionMenu:q,XTooltip:oe,InputSwitch:re,RepostioryDomainCell:xe,BasePill:X,DataTableLastScanColumn:Be,DataTableCellSelectable:De,InputCheckbox:Ae},emits:["update:selectedContainerRepoIds"],data(){return{scanning:{},fullHeight:0}},created(){y.on(G,this.handleScanEvent)},beforeUnmount(){y.off(G,this.handleScanEvent)},watch:{isLoading(){this.saveFullHeight()},repositories:{handler(){this.saveFullHeight()},deep:!0}},computed:{tableStyle(){return this.fullHeight<=0?"":{height:`${this.fullHeight}px`}},isFreeAccount(){return E.hasExpiredFullTrial(!1)},hasSelectedContainerRepos(){return this.selectedContainerRepoIds.length>0},containerRepoSelectionMode(){return this.selectedContainerRepoIds.length>0?"edit":"display"},allContainerReposSelected(){return this.selectedContainerRepoIds.length>0&&this.selectedContainerRepoIds.length===this.repositories.length}},methods:{getRepoName:Te,async saveFullHeight(){this.isLoading||(this.fullHeight=0,await this.$nextTick(),this.fullHeight=this.$el.offsetHeight)},handleScanEvent(e){const{type:t,progress:s,cloudRepoId:h}=e;if(t==="progress_update"){if(this.scanning[h]>s)return;this.scanning[h]=s}else t==="completed"?(this.scanning[h]=100,this.$emit("requestDataFetchForImage",h)):t==="failure"&&(delete this.scanning[h],this.$emit("requestDataFetchForImage",h),Toast.error({title:this.$t("ERROR"),description:"We were unable to complete the scan for this repository"}))},isScanInProgress(e){const t=this.scanningProgressForRepo(e);return!!t&&t>0&&t<100},scanningProgressForRepo(e){return this.scanning[e]||0},isSvgIcon(e){const t=e.cloud_type??e.registry_source;return["digitalocean","scaleway","cloudsmith","harbor","quay","artifactory","sonatype-nexus"].includes(t)},getSourceIcon(e){if(e.is_public==1)return"icon-docker";const t=e.cloud_type??e.registry_source;return t=="docker-hub"?"icon-docker":t=="gitlab"||t=="gitlab-self"?"icon-Gitlab":t=="github"?"icon-github":t=="aws"?"icon-location_aws":t=="gcp"?"icon-gcp":t=="azure"||t=="acr"?"icon-azure":t=="digitalocean"?"digitalocean-black":t=="scaleway"?"scaleway-black":t=="gcp-container-registry"||t=="gcp-artifact-registry"?"icon-gcp":t=="cloudsmith"?"cloudsmith-black":t=="artifactory"?"artifactory-black":t=="harbor"?"harbor-black":t=="quay"?"quay-black":t=="sonatype-nexus"?"sonatype-nexus":"icon-group"},isSbomImage(e){return!(e.is_public==1||e.cloud_type||e.registry_source)},getActionMenuItems(e){const t=[{items:[{hidden:e.active==1,label:"Activate",onClick:()=>this.toggleActiveButton(e.id),icon:"icon-shield_check"},{hidden:e.active==0,label:"Start scan",onClick:()=>this.startScanClickedFor(e),icon:"icon-arrow-right",iconColor:"green"},{hidden:e.is_public==1,label:"Edit tag filter",onClick:()=>this.editTagFilter(e),icon:"icon-edit"},{label:this.$t("REPOSITORY_ACTION_MENU.CONFIGURE_ARCHITECTURE"),onClick:()=>this.handleConfigureArchitecture(e),icon:"icon-settings"},{hidden:e.code_repository_name===null&&(e.cloud_id!==null||e.registry_id!==null),label:"Unlink from repo",onClick:()=>this.handleUnlinkRepo(e.id),icon:"icon-link"},{hidden:e.is_public==0&&!this.isSbomImage(e),label:"Delete",onClick:()=>this.deleteRegistryRepo(e.id),destructive:!0}]}];return t[0].items.filter(s=>!s.hidden).length==0?[{title:"No actions available",items:[]}]:t},startScanClickedFor(e){if(E.hasExpiredFullTrial()&&e.last_scanned_at>0)return this.$modal.show("UpgradeAccountModal",{title:"Upgrade to scan whenever you want",msg:"In our free plan, scans are performed automatically every night. Step up to instant scanning when it suits you, across all your repositories, clouds and containers."});this.$emit("startScanClicked",e.id)},async deleteRegistryRepo(e){await N({headerText:"Delete repository",description:"Do you want to remove this repository? This will also remove all associated issues.",buttonSubmitText:"Yes, delete"})&&(await le(e),this.$emit("requestDataFetchForImage",e),this.$toast.success("Repository successfully deleted"))},async toggleActive(e,t){if(t){if(e.code_repository_name==null&&!await ce({headerText:"Activate container",description:"Do you want to activate scanning for this container without linking a code repository first?",buttonSubmitText:"Yes, activate"})){this.toggleActiveButton(e.id);return}await de(e.id),this.$toast.success("Container successfully activated"),y.emit("cloudRepository.activated")}else{const{was_already_deactivated:s}=await ue(e.id);s||(this.$toast.success("Container successfully deactivated"),y.emit("cloudRepository.deactivated"))}},toggleActiveButton(e){this.$refs[`activeSwitch_${e}`][0].toggleManually()},canDisableRepository(e){return!this.isSbomImage(e)},async editTagFilter(e){(await this.$modal.show("EditCloudRepoTagFilterModal",{cloudRepoId:e.id,currentTag:e.tag})).type=="saved"&&this.$emit("requestDataFetchForImage",e.id)},async handleConfigureArchitecture(e){(await this.$modal.show("RepositoryArchitectureConfigurationModal",{image:e})).type=="saved"&&this.$emit("requestDataFetchForImage",e.id)},getFormattedSensitivity(e){return e.internet_exposed?ge.global.te(`SENSITIVITY_${e.sensitivity}`)?this.$t(`SENSITIVITY_${e.sensitivity}`):e.sensitivity:"N/A"},async handleUnlinkRepo(e){await N({headerText:"Unlink repository",description:"The container will be unlinked from the code repository. Findings will be deleted and re-scanned. continue?",buttonSubmitText:"Yes, unlink"})&&(await he(e),this.$toast.success({title:"Repository successfully unlinked",description:"We unlinked this container image from the code repository successfully, we'll rescan and rescore the issues."}),this.$emit("requestDataFetchForImage",e))},shouldShowUpgradePlanButton(e){if(!this.isFreeAccount||e.last_scanned_at<1)return!1;const t=$e(23);return e.last_scanned_at<t},showUpgradePlanModal(){this.$modal.show("UpgradeAccountModal",{title:"Upgrade to scan all containers",msg:"Our free plan includes nightly scans of up to two containers. Upgrade now to any paid plan to automatically scan all containers and manually trigger a scan anytime."})},requestDataFetchForImage(e){this.$emit("requestDataFetchForImage",e)},handleSelectContainerRepo(e,t){e?this.$emit("update:selectedContainerRepoIds",[...this.selectedContainerRepoIds,t]):this.$emit("update:selectedContainerRepoIds",this.selectedContainerRepoIds.filter(s=>s!==t))},handleToggleSelectAllContainerRepos(e){if(e){const t=this.repositories.map(s=>s.id);this.$emit("update:selectedContainerRepoIds",t)}else this.$emit("update:selectedContainerRepoIds",[])}}},je=["src"],Ke={class:"flex align-center gap-8px flex-wrap"},Qe={key:0},Xe={key:0,class:"flex align-center gap-4px flex-1 truncate-left justify-end"},Je=p("i",{class:"icon icon-12px icon-viewDetails valign-middle text-gray-100 opacity-0 group_hover_opacity-100"},null,-1),Ze=p("div",{class:"shimmer shimmer--blue"},null,-1),et=[Ze],tt={key:1,class:"w-full"};function it(e,t,s,h,l,a){const T=o("InputCheckbox"),f=o("DataTableHeader"),R=o("DataTableCellSelectable"),k=o("BaseParagraph"),_=o("BasePill"),m=o("DataTableCell"),A=o("RouterLink"),x=o("LinkCloudRepo"),b=o("RepostioryDomainCell"),U=o("DataTableLastScanColumn"),B=o("InputSwitch"),O=o("BaseIconButton"),d=o("ActionMenu"),D=o("DataTableRow"),C=o("LoadingSkeleton"),ie=o("DataTable");return c(),u("div",{style:H(a.tableStyle)},[s.isLoading||s.repositories.length>0?(c(),I(ie,{key:0},{header:n(()=>[i(f,{width:"48px",alignment:"center",spacing:"compact"},{default:n(()=>[i(T,{"semi-checked":a.hasSelectedContainerRepos,modelValue:a.allContainerReposSelected,"onUpdate:modelValue":a.handleToggleSelectAllContainerRepos},null,8,["semi-checked","modelValue","onUpdate:modelValue"])]),_:1}),i(f,{width:"auto"},{default:n(()=>[g("Name")]),_:1}),i(f,{width:"auto"},{default:n(()=>[g("Code repository")]),_:1}),i(f,{width:"200px",class:"wide-tablet_hidden"},{default:n(()=>[g("Domain")]),_:1}),i(f,{width:"120px",spacing:"compact",alignment:"center"},{default:n(()=>[g("Sensitivity")]),_:1}),i(f,{width:"115px"},{default:n(()=>[g("Last scan")]),_:1}),i(f,{width:"100px"},{default:n(()=>[g("Activated")]),_:1}),i(f,{width:"48px",alignment:"center"})]),body:n(()=>[(c(!0),u(M,null,$(s.repositories,(r,ne)=>(c(),I(D,{key:r.id,clickable:"",href:`/container/${r.id}`},{default:n(()=>[i(R,{mode:a.containerRepoSelectionMode,selected:s.selectedContainerRepoIds.includes(r.id),onSelect:S=>a.handleSelectContainerRepo(S,r.id),onClick:t[0]||(t[0]=w(()=>{},["prevent","stop"]))},{default:n(()=>[a.isSvgIcon(r)?(c(),u("img",{key:0,src:`/assets/icons/${a.getSourceIcon(r)}.svg`,height:"12",class:"rounded-2px"},null,8,je)):(c(),u("i",{key:1,class:L(["icon text-carbon-60",a.getSourceIcon(r)])},null,2))]),_:2},1032,["mode","selected","onSelect"]),i(m,null,{default:n(()=>[p("div",Ke,[i(k,{class:"text-break-word"},{default:n(()=>[g(F(r.name),1),r.tag?(c(),u("span",Qe,":"+F(r.tag),1)):v("",!0)]),_:2},1024),r.region&&r.region!=="global"?(c(),I(_,{key:0,title:r.region,variation:"gray-fill"},null,8,["title"])):v("",!0)])]),_:2},1024),i(m,{class:L({"py-2px px-16px":!r.code_repository_name}),spacing:r.code_repository_name?"normal":"none"},{default:n(()=>[r.code_repository_name?(c(),u("div",Xe,[i(A,{to:`/repositories/${r.code_repo_id}`,class:"truncate group flex align-center gap-4px",onClick:t[1]||(t[1]=w(()=>{},["stop"]))},{default:n(()=>[Je,i(k,{truncate:!0},{default:n(()=>[g(F(a.getRepoName(r)),1)]),_:2},1024)]),_:2},1032,["to"])])):(c(),I(x,{key:1,"cloud-repository":r,onLinked:S=>a.requestDataFetchForImage(r.id)},null,8,["cloud-repository","onLinked"]))]),_:2},1032,["class","spacing"]),i(b,{image:r,onRepositoryUpdated:S=>a.requestDataFetchForImage(r.id)},null,8,["image","onRepositoryUpdated"]),i(m,{spacing:"compact",alignment:"center"},{default:n(()=>[i(k,{class:"truncate"},{default:n(()=>[g(F(a.getFormattedSensitivity(r)),1)]),_:2},1024)]),_:2},1024),i(m,null,{default:n(()=>[a.isScanInProgress(r.id)?(c(),u("div",{key:0,class:"loading-bar",style:H({width:`${a.scanningProgressForRepo(r.id)}%`})},et,4)):a.shouldShowUpgradePlanButton(r)?(c(),u("div",tt,[i(_,{class:"mx-auto",variation:"orange",title:"Upgrade",onClick:w(a.showUpgradePlanModal,["prevent"])},null,8,["onClick"])])):(c(),I(U,{key:2,"last-scanned-at":r.last_scanned_at},null,8,["last-scanned-at"]))]),_:2},1024),i(m,null,{default:n(()=>[i(B,{ref_for:!0,ref:`activeSwitch_${r.id}`,disabled:!a.canDisableRepository(r),modelValue:r.active,"onUpdate:modelValue":S=>r.active=S,onClick:t[2]||(t[2]=w(()=>{},["stop"])),onChange:S=>a.toggleActive(r,S)},null,8,["disabled","modelValue","onUpdate:modelValue","onChange"])]),_:2},1024),i(m,{spacing:"compact",alignment:"center",class:"data-table__cell--action",onClick:w(()=>e.$refs.trigger[ne].click(),["prevent","stop"])},{default:n(()=>[i(d,{sections:a.getActionMenuItems(r),placement:"bottom-end"},{trigger:n(S=>[i(O,{icon:"icon-actions",class:"data-table__row__action",onClick:w(S.toggle,["prevent"]),ref_for:!0,ref:"trigger"},null,8,["onClick"])]),_:2},1032,["sections"])]),_:2},1032,["onClick"])]),_:2},1032,["href"]))),128)),s.isLoading?(c(),u(M,{key:0},$(3,r=>i(D,{key:r},{default:n(()=>[i(m,null,{default:n(()=>[i(C,{height:"16px"})]),_:1}),i(m,null,{default:n(()=>[i(C,{height:"16px"})]),_:1}),i(m,null,{default:n(()=>[i(C,{height:"16px"})]),_:1}),i(m,null,{default:n(()=>[i(C,{height:"16px"})]),_:1}),i(m,null,{default:n(()=>[i(C,{height:"16px"})]),_:1}),i(m,null,{default:n(()=>[i(C,{height:"16px"})]),_:1})]),_:2},1024)),64)):v("",!0)]),_:1})):v("",!0)],4)}const nt=P(We,[["render",it]]),at={components:{ActionMenu:q,FilterButton:Me},emits:["activate_container","deactivate_container"],props:{showDeleteContainerOption:{type:Boolean,default:!1}},computed:{actions(){return[{title:"Bulk Actions",items:[{label:"Activate Containers",onClick:()=>this.$emit("activate_container")},{label:"Deactivate Containers",onClick:()=>this.$emit("deactivate_container")},{label:"Delete Containers",onClick:()=>this.$emit("delete_container"),hidden:!this.showDeleteContainerOption},{label:"Assign To Team",onClick:()=>this.$emit("add_to_team")}].filter(t=>!t.hidden)}]}}},st=p("i",{class:"icon icon-caret_down icon-12px"},null,-1);function ot(e,t,s,h,l,a){const T=o("FilterButton"),f=o("ActionMenu");return c(),u("div",null,[i(f,{sections:a.actions,placement:"bottom-end",useBaseIcon:!0},{trigger:n(R=>[i(T,{onClick:()=>R.toggle()},{default:n(()=>[g(" Bulk Actions "),st]),_:2},1032,["onClick"])]),_:1},8,["sections"])])}const rt=P(at,[["render",ot]]),lt=e=>["docker-hub","cloudsmith","acr","gcp-container-registry"].includes(e.kind)?e.registry_name||e.username:e.api_url?new URL(e.api_url).hostname:e.username,ct={components:{RegistryOverview:ze,RepositoryOverview:nt,BaseButton:V,BaseHeading:me,InputSearch:pe,InputFilterDropdown:Ue,AikidoScannerForRegistriesCallout:Ee,ContainerImageRegistryBulkActions:rt},data(){return{isLoading:!0,isLoadingRepositories:!1,registries:[],clouds:[],repositorySearchTerm:"",configurationIssues:[],selectedFilterRegistryId:"",selectedContainerRepoIds:[],canManageContainers:this.$groupUser.can_manage_containers}},setup(){const{records:e,refresh:t,watchElement:s}=be(W,30,h=>h);return{repositories:e,refreshRepositories:t,watchElement:s}},provide(){return{registries:fe(()=>this.registries)}},created(){y.on(Y,this.loadData),y.on("cloudRepository.deactivated",this.loadData),y.on("configurationIssueIgnored",this.loadConfigurationIssues)},beforeUnmount(){y.off(Y,this.loadData),y.off("cloudRepository.deactivated",this.loadData),y.off("configurationIssueIgnored",this.loadConfigurationIssues)},async mounted(){if(await this.loadData(),this.isLoading=!1,this.$route.query.editRegistry){const e=this.registries.find(t=>t.id==this.$route.query.editRegistry);e&&this.$modal.show("UpdateContainerRegistryTokenModal",e)}await this.$nextTick(),this.watchElement(this.$refs.tableBottom,{threshold:0,rootMargin:"400px"})},watch:{$teamContext(){this.loadData()}},computed:{registryOptions(){const e=this.registries.map(l=>({value:`registry|${l.id}`,label:lt(l)})),s=this.registries.filter(l=>["aws","gcp-artifact-registry","gcp-container-registry"].includes(l.kind)).map(l=>l.registry_name),h=this.clouds.filter(l=>!s.includes(l.account_id)).map(l=>({value:`cloud|${l.id}`,label:l.name}));return[{value:"",label:"All Registries",default:!0},...e,...h]},hasSelectedContainers(){return this.selectedContainerRepoIds.length>0},canDeleteImages(){const e=this.repositories.filter(t=>this.isSbomImage(t)).map(t=>t.id);return this.selectedContainerRepoIds.some(t=>e.includes(t))}},methods:{async loadData(){await Promise.allSettled([this.handleGetRegistries(),this.loadRepositories(),this.handleGetClouds(),this.loadConfigurationIssues()])},searchRepositories:_e(function(){this.loadRepositories()},250),async loadRepositories(){this.isLoadingRepositories=!0;let e=-1;this.selectedFilterRegistryId.startsWith("registry|")&&(e=this.selectedFilterRegistryId.replace("registry|",""));let t=-1;this.selectedFilterRegistryId.startsWith("cloud|")&&(t=this.selectedFilterRegistryId.replace("cloud|","")),await this.refreshRepositories({search_term:this.repositorySearchTerm,filter_registry_id:e,filter_cloud_id:t}),this.isLoadingRepositories=!1},async handleGetRegistries(){this.registries=await Ce()},async loadConfigurationIssues(){this.configurationIssues=await ye()},async handleGetClouds(){const e=await Re();this.clouds=e.filter(t=>t.type==="gcp"||t.type==="aws")},handleConnectRegistry(){if(!this.canManageContainers){this.$modal.show("InfoModal",{headerText:"Connect Container Registry",title:"You do not have permission to manage container registries.",description:"Contact your admin to manage container registries",buttonSubmitText:"Got It!"});return}if(E.data.group.is_demo_group===1)return this.$modal.show("AddWorkspaceRedirectModal");this.$modal.show("ConnectContainerRegistryModal")},async startScanForCloud(e){if(E.hasExpiredFullTrial())return this.$modal.show("UpgradeAccountModal",{title:"Upgrade to scan whenever you want",msg:"In our free plan, scans are performed automatically every night. Step up to instant scanning when it suits you, across all your repositories, clouds and containers."});await ke(e,"scan"),this.$toast.success({title:this.$t("SUCCESS"),description:"Scan successfully started"})},async startScanForRegistry(e){if(E.hasExpiredFullTrial()){this.$modal.show("UpgradeAccountModal",{title:"Upgrade to scan whenever you want",msg:"In our free plan, scans are performed automatically every night. Step up to instant scanning when it suits you, across all your repositories, clouds and containers."});return}const t=this.repositories.filter(s=>s.registry_id==e).map(s=>s.id);await Promise.allSettled(t.map(s=>z({cloud_repo_id:s},{disable_toasts:!0,no_disable_buttons:!0}))),this.$toast.success({title:this.$t("SUCCESS"),description:"Scan successfully started"})},async startScan(e){await z({cloud_repo_id:e},{no_disable_buttons:!0}),this.$toast.success({title:this.$t("SUCCESS"),description:"Scan successfully started"})},async handleConnectPublicImage(){if(E.data.group.is_demo_group===1)return this.$modal.show("AddWorkspaceRedirectModal");(await this.$modal.show("AddPublicCloudRepoModal")).type=="saved"&&this.loadData()},async handleUpdateContainerRegistrySettings(){this.$modal.show("UpdateContainerReposConfiguration")},async fetchDataForImage(e){const t=this.repositories.findIndex(l=>l.id==e);if(t<0)return;const s=await W({filter_image_id:e});if(s.length==0){this.repositories.splice(t,1);return}const h=s[0];this.repositories&&(t<0||this.repositories.splice(t,1,h))},async onRegistryFilterChanged(){await this.loadRepositories()},async handleRegistryClicked(e){this.selectedFilterRegistryId=`registry|${e}`,await this.loadRepositories()},async handleCloudClicked(e){this.selectedFilterRegistryId=`cloud|${e}`,await this.loadRepositories()},async handleEnableContainersBulk(){await this.$modal.show("ContainerImageRegistryBulkActionModal",{action:"activate",containerRepoIds:this.selectedContainerRepoIds}),this.refreshRepositories()},async handleDisableContainersBulk(){const e=this.repositories.filter(t=>this.selectedContainerRepoIds.includes(t.id)&&!this.isSbomImage(t)).map(t=>t.id);await this.$modal.show("ContainerImageRegistryBulkActionModal",{action:"deactivate",containerRepoIds:e}),this.refreshRepositories()},async handleDeleteContainersBulk(){const e=this.repositories.filter(t=>this.selectedContainerRepoIds.includes(t.id)&&this.isSbomImage(t)).map(t=>t.id);await this.$modal.show("ContainerImageRegistryBulkActionModal",{action:"delete",containerRepoIds:e}),this.refreshRepositories()},handleLinkContainersToTeam(){this.$modal.show("BulkAssignToTeamModal",{containerRepoIds:this.selectedContainerRepoIds})},isSbomImage(e){return!(e.is_public==1||e.cloud_type||e.registry_source)}}},dt={class:"flex flex-column gap-32px"},ut={class:"flex flex-column gap-16px"},gt=p("span",null,"Registries",-1),ht=p("i",{class:"icon icon-add"},null,-1),mt={class:"flex flex-column gap-16px"},pt={class:"flex align-center justify-between gap-16px flex-wrap"},ft={class:"flex gap-16px align-center"},_t={class:"flex align-center gap-16px"},Ct=p("i",{class:"icon icon-settings"},null,-1),yt=p("i",{class:"icon icon-add"},null,-1),Rt={ref:"tableBottom"};function kt(e,t,s,h,l,a){const T=o("AikidoScannerForRegistriesCallout"),f=o("BaseButton"),R=o("BaseHeading"),k=o("RegistryOverview"),_=o("InputSearch"),m=o("InputFilterDropdown"),A=o("ContainerImageRegistryBulkActions"),x=o("RepositoryOverview");return c(),u("div",dt,[p("div",ut,[i(T),i(R,{as:"h3",class:"flex align-center h-36px"},{default:n(()=>[gt,i(f,{onClick:a.handleConnectRegistry,size:"small",class:"ml-auto"},{default:n(()=>[ht,g(" Connect registry ")]),_:1},8,["onClick"])]),_:1}),i(k,{registries:l.registries,clouds:l.clouds,"is-loading":l.isLoading,"configuration-issues":l.configurationIssues,onStartScanClicked:a.startScanForRegistry,onStartCloudScanClicked:a.startScanForCloud,onRegistryDeleted:a.loadData,onConnectRegistryClick:a.handleConnectRegistry,onOnRegistryClicked:a.handleRegistryClicked,onOnCloudClicked:a.handleCloudClicked},null,8,["registries","clouds","is-loading","configuration-issues","onStartScanClicked","onStartCloudScanClicked","onRegistryDeleted","onConnectRegistryClick","onOnRegistryClicked","onOnCloudClicked"])]),p("div",mt,[p("div",pt,[p("div",ft,[i(R,{as:"h3"},{default:n(()=>[g("Containers")]),_:1}),i(_,{modelValue:l.repositorySearchTerm,"onUpdate:modelValue":[t[0]||(t[0]=b=>l.repositorySearchTerm=b),a.searchRepositories],spacing:"compact",inputClass:"py-6px"},null,8,["modelValue","onUpdate:modelValue"]),i(m,{options:a.registryOptions,modelValue:l.selectedFilterRegistryId,"onUpdate:modelValue":[t[1]||(t[1]=b=>l.selectedFilterRegistryId=b),a.onRegistryFilterChanged]},null,8,["options","modelValue","onUpdate:modelValue"])]),p("div",_t,[i(Ie,{name:"expand-horizontal-"},{default:n(()=>[l.selectedContainerRepoIds.length>0?(c(),I(A,{key:0,showDeleteContainerOption:a.canDeleteImages,onActivate_container:a.handleEnableContainersBulk,onDeactivate_container:a.handleDisableContainersBulk,onDelete_container:a.handleDeleteContainersBulk,onAdd_to_team:a.handleLinkContainersToTeam},null,8,["showDeleteContainerOption","onActivate_container","onDeactivate_container","onDelete_container","onAdd_to_team"])):v("",!0)]),_:1}),i(f,{variation:"blue",size:"small",onClick:a.handleUpdateContainerRegistrySettings},{default:n(()=>[Ct,g(" Configure ")]),_:1},8,["onClick"]),l.canManageContainers?(c(),I(f,{key:0,onClick:a.handleConnectPublicImage,size:"small",class:"ml-auto"},{default:n(()=>[yt,g(" Add public docker image ")]),_:1},8,["onClick"])):v("",!0)])]),i(x,{repositories:h.repositories,"is-loading":l.isLoading||l.isLoadingRepositories,onStartScanClicked:a.startScan,onRequestDataFetchForImage:a.fetchDataForImage,onConnectPublicRepoClick:a.handleConnectPublicImage,"selected-container-repo-ids":l.selectedContainerRepoIds,"onUpdate:selectedContainerRepoIds":t[2]||(t[2]=b=>l.selectedContainerRepoIds=b)},null,8,["repositories","is-loading","onStartScanClicked","onRequestDataFetchForImage","onConnectPublicRepoClick","selected-container-repo-ids"]),p("div",Rt,null,512)])])}const zt=P(ct,[["render",kt]]);export{zt as default};
