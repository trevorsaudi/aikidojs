import{_ as P,B as b,r as i,q as p,m as y,n as o,o as d,w as a,aa as T,d as V,M,a2 as N,H as S,au as R,V as H,f as $,gx as E,gy as L,gz as U,k as m,s as r,p as I,F as q,t as z}from"./index-13ff96f4.js";import{S as D}from"./SelectRepoSearchable-f2be202e.js";import{B as F}from"./BaseCodeBlock-cec75629.js";import{B as O}from"./BaseCallout-aea0aba4.js";import{i as A}from"./isIP-d5cb9e58.js";import"./repoName-872812ed.js";import"./InputSearchDropdown-02988f6b.js";import"./ActionMenu-3e4470bf.js";const Z={name:"InfoBaseParagraph",components:{BaseParagraph:b}},j={class:"mt-12px py-12px px-16px flex gap-16px align-center bg-surface-blue-20 border-1 border-surface-blue-80 rounded-8px"};function X(e,t,c,u,s,l){const f=i("BaseParagraph");return p(),y("div",j,[o("div",null,[d(f,{color:"blue"},{default:a(()=>[T(e.$slots,"default")]),_:3})])])}const G=P(Z,[["render",X]]);function B(e){if(typeof e!="string")throw new TypeError("Expected a string");if(!e)return!1;if(!e.includes("/"))return A(e);const t=e.split("/");if(t.length!==2)return!1;const[c,u]=t;if(!A(c)||!/^\d+$/.test(u))return!1;const s=parseInt(u,10);return isNaN(s)?!1:c.includes(":")?s>=0&&s<=128:s>=0&&s<=32}function J(e){if(e.includes("/")){const[t,c]=e.split("/");return 2**((t.includes(":")?128:32)-Number(c))}return 1}const K={emits:["close"],components:{BasePill:V,InfoBaseParagraph:G,BaseCallout:O,BaseModal:M,XTooltip:N,BaseCodeBlock:F,BaseHeading:S,BaseConfirmModal:R,SelectRepoSearchable:D,BaseParagraph:b,InputText:H,BaseButton:$},props:{service:{type:Object,required:!0}},data(){return{ipAddresses:[""],myIpAddress:void 0,loading:!0}},async mounted(){const e=await E({serviceId:this.service.id});e.length>0&&(this.ipAddresses=e),this.myIpAddress=await L(),this.loading=!1},methods:{async onSubmit(){await U({serviceId:this.service.id,ipAddresses:this.ipAddresses.filter(B)}),this.$emit("close")},onClose(){this.$emit("close")},handleAddIPAddress(){this.ipAddresses.push("")},handleRemoveIPAddress(e){this.ipAddresses.splice(e,1),this.ipAddresses.length===0&&this.ipAddresses.push("")},handleTypingIPAddress(e,t){this.ipAddresses[e]=t},handleBlur(e){B(this.ipAddresses[e])||(this.ipAddresses[e]="")},handleClickMyIp(){this.ipAddresses[this.ipAddresses.length-1]=this.myIpAddress},countIPs(e){return J(e)}}},Q=o("div",null,null,-1),W={class:"flex flex-column gap-12px w-full"},Y=o("span",{class:"text--semi-bold"},"all Zen features will be disabled",-1),ee={class:"text-primary-aik-140 text--semi body--normal block mb-12px flex gap-6px"},se={class:"flex flex-column gap-8px mb-12px"},te={class:"flex"},ae=o("i",{class:"icon icon-add"},null,-1);function le(e,t,c,u,s,l){const f=i("BaseHeading"),x=i("BaseParagraph"),v=i("InfoBaseParagraph"),_=i("BasePill"),k=i("InputText"),h=i("BaseButton"),C=i("BaseModal");return p(),m(C,{width:800,onClose:t[1]||(t[1]=g=>this.$emit("close")),allowBackgroundClose:!1},{header:a(()=>[Q]),content:a(()=>[o("div",W,[d(f,{as:"h3"},{default:a(()=>[r("Bypass List")]),_:1}),d(x,null,{default:a(()=>[r(" The IPs in this list will bypass all Zen security features, including rate limiting, attack blocking, bot blocking and geo blocking. This is particularly useful for trusted IPs like your own servers, development teams, or trusted third-party services. ")]),_:1}),d(v,null,{default:a(()=>[r(" Add IPs with caution as "),Y,r(" for these addresses. ")]),_:1})]),o("div",null,[o("label",ee,[r(" IP Addresses "),s.myIpAddress?(p(),m(_,{key:0,class:"cursor-pointer",title:"Copy your IP: "+s.myIpAddress,variation:"gray-fill",onClick:l.handleClickMyIp},null,8,["title","onClick"])):I("",!0)]),o("div",se,[(p(!0),y(q,null,z(s.ipAddresses,(g,n)=>(p(),m(k,{key:n,placeholder:"IP Address or CIDR Range",modelValue:s.ipAddresses[n],"onUpdate:modelValue":w=>l.handleTypingIPAddress(n,w),name:"ipAddress",type:"text",onClear:()=>l.handleRemoveIPAddress(n),clearable:!0,onBlur:()=>l.handleBlur(n),disabled:s.loading},{extraLabel:a(()=>[l.countIPs(s.ipAddresses[n])>1?(p(),m(_,{key:0,variation:"gray-fill",title:`Allows ${l.countIPs(s.ipAddresses[n])} IPs`,class:"h-full"},null,8,["title"])):I("",!0)]),default:a(()=>[r(" > ")]),_:2},1032,["modelValue","onUpdate:modelValue","onClear","onBlur","disabled"]))),128))]),o("div",te,[d(h,{variation:"plain",size:"small",onClick:l.handleAddIPAddress,class:"align-self-center mt-8px",disabled:s.loading},{default:a(()=>[ae,r(" Add IP Address ")]),_:1},8,["onClick","disabled"])])])]),footer:a(()=>[d(h,{onClicked:t[0]||(t[0]=g=>this.$emit("close")),variation:"tertiary",class:"ml-auto"},{default:a(()=>[r("Cancel")]),_:1}),d(h,{onClicked:l.onSubmit},{default:a(()=>[r("Save")]),_:1},8,["onClicked"])]),_:1})}const me=P(K,[["render",le]]);export{me as default};
